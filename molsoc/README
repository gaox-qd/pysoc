MolSOC version 0.1
Created by Sandro G. Chiodo

INSTALLATION

The following instructions are also reported in the manual.pdf located 
in the molsoc0.1/doc directory.

To compile MolSOC is very simple, just you need to open the Makefile, 
located in the source code directory (source), and uncomment the lines where 
are defined own fortran compiler, flags, and linker. Note that MolSOC 
is supplied with LAPACK and BLAS math libraries which must be compiled before 
the source code. The math library Makefile is located in the lib directory.
These Makefiles contain the targets specific to the following compilers:

- OSF/1 Tru64 compiler;
- Intel Fortran compiler;
- Portland Group Fortran-90 compiler.

MolSOC needs a working Fortran 90 compiler. The
following installation procedure can be used:
- Unpack the MolSOC distribution files in subdirectory molsoc0.1 of own 
  desired directory;
- Go to the molsoc0.1/lib subdirectory and uncomment or add own fortran 
  compiler, flags, and linker in the Makefile;
- Issue in this subdirectory the command make to compile the MolSOC libreries;
- Go to the molsoc0.1/source subdirectory and uncomment or add 
  own fortran compiler, flags, and linker in the Makefile;
- Issue in this subdirectory the command make to compile the MolSOC 
  source code. The molsoc0.1.exe executable will be created and placed in 
  the directory molsoc0.1/bin;
- To make the MolSOC executable permanently recognizable by the operating 
  system by simply typing molsoc0.1.exe from the linux shell prompt,
  add its location path to own shell initialization file (.cshrc or .profile)

MolSOC distribution package contains the following directories and files:
- bin          Executale  
- doc          Documantation files     
- examples     Example and test files 
- include      Include files 
- lib          Library files  
- source       Source code files  

HOW TO RUN MolSOC

To run MolSOC four input files are necessary, containing the following 
information:
- The file molsoc.inp must contain the geometry common to both the electronic 
  states, together with keywords specifying desired calculation type;
- The basis set file, basis, must contain gaussian contraction
  coefficients and exponents;
- The files mos1 and mos2 must contain the MO linear combination coefficients
  of the first and second state, respectively. These files can be obtained 
  simply by changing the name of the file deMon.rst of deMon or
  the file Test.FChk of Gaussian or mos of (TURBOMOLE) to mos1 or mos2
  depending on which is the first or the second state.
All these files must be located in the working directory. 

DESCRIPTION OF THE ROUTINES

ROUTINE         FILE          DESCRIPTION

ALTMOS          altmos.f      Alters the MOs configuration
ATOMDATA        atomdata.f    Loads atomic number and effective nuclear charge
ATOMDIS         atomdis.f     Calculates atomic square distances and interatomic vectors
BLDIMAT         bldimat.f     Builds the overlap matrix
BLDIMOM         bldimom.f     Builds the moment matrices 
BLDIMSO         bldimso.f     Builds one-electron spin-orbit matrix
BLDOVER         bldover.f     Driver routine for the overlap matrix
BLDPFS0         bldpfs0.f     Builds the two-state density matrix and the overlap integral product (orbital discoincidence case)
BLDPFS2         bldpfs2.f     Builds the two-state density matrix and the overlap integral product (spin discoincidence case)
BLDSOC0         bldsoc0.f     Builds x,y,z components of the spin-orbit matrix elemets (orbital discoincidence case)
BLDSOC2         bldsoc2.f     Builds x,y,z components of the spin-orbit matrix elemets (spin discoincidence case)
BLDSOC          bldsoc.f      Driver routine for the occupation numbers routine and the driver routine to calculate 
                              spin-orbit matrix elements
CHKMULT         chkmult.f     Checks the right multiplicity and number of electron
CLEBSCH         clebsch.f     Calculates Clebsch-Gordan coefficients using the Racah formula
COPYR           copyr.f       Writes the cophyright 
CPUTIME         cputime.f     Evaluates the cpu time at some step of the calculation
CRFTABLE        crftable.f    Calculates and tabulates the incomplete gamma function
DEMON           demon.f       Read MOs from deMon.rst file generated by deMon
DISCONE         discone.f     Calculates the one-electron spin-orbit matrix elements (spin discoincidence case)
DISCZERO        disczero.f    Calculates the one-electron spin-orbit matrix elements (orbital discoincidence case)
ERRORS          errors.f      Stops the calculation if an erroneous combination of the couple of O identifier for direct D
                              or reverse R procedure is selected (see the manual)
FILEIO          fileio.f      Opens and closes permanent and temporary files
FINELE          finele.f      Finds keywords decoding the line for the basis file
FINKEY          finkey.f      Finds keywords decoding the line for the input file
FINNEL          finnel.f      Calculates the number of electrons
FINSTR          finstr.f      Finds strings reading input file
GAMMAF          gammaf.f      Calculates the incomplete gamma function
GAUSSIAN        gaussian.f    Read MOs from the Test.FChk file generated by Gaussian 
GENOP           genop.f       Generates orbital pointers
GETDATE         getdate.f     Gets the date
INIOCC          iniocc.f      Initializes orbital occupation
INITIALIZE      initialize.f  Initializes keywords, variables, vectors and matrices statically allocated
IOSCR           ioscr.f       Read and writes from Input and output scratch files
KSSOC           kssoc.f       The driver routine for spin-orbit matrix elements calculation (starts the dynamic allocation)
MATHCON         mathcon.f     Initializes mathematical constants and functions
MATRELEM        matrelem.f    Builds spin-orbit matrix elements using the Clebsh-Gordan coefficients
MOLSOC          molsoc.f      Is the main routine
MOMENT          moment.f      Calculates the moment integrals
MOMESYM         momesym.f     Loads moment symbols
MOOCC           moocc.f       Sets the MOs occupation
MOS             mos.f         Calculates the two state MOs overlap matrix
MOTRSC          motrsc.f      Transformates MOs from sphericals to cartesians
MULDENS         muldens.f     Calculates alpha and beta density matrix and the number of electron
MULTIPOLE       multipole.f   Calculates and writes the multipole moments 
NORGTF          norgtf.f      Normalizes the gaussian-type functions
NORSTO          norsto.f      Normalize Slater type orbitals
ORBORD          orbord.f      Reorders the linear combination MOs coefficients read from the Test.FChk file of Gaussian
ORBSYM          orbsym.f      Reorders the symbols of the AOs 
ORTHO           ortho.f       Does the Cram-Schmidt Orthogonalization
ORTSVDLAP       ortsvdlap.f   Biorthogonalizes the MOs of the two states.  
OVERABU         overabu.f     Writes the two-state alpha MO overlap integrals
OVERFS          overfs.f      Driver routine for the two state MOs biorthogonalization. Calculate before and after the 
                              biorthogonalization the two-state MOs overlap matrix
OVERLAP         overlap.f     Driver routine to calculate the overlap integrals and the overlap matrix
POINTER         pointer.f     Builds pointer for MOs integrals
READBAS         readbas.f     Read the basis set from the file basis
READINP         readinp.f     Read the input file molsoc.imp
READMOS         readmos.f     Driver routine to read MOs orbitals from the deMon.rst or the Test.FChk or the mos files 
READSHGF        readshgf.f    Read shell pointers and gaussian functions
RR1SOCIN        rr1socin.f    Calculates the recurrence relation field elements for the one-electron spin-orbit 
                              coupling integrals
RR21            rr21.f        Calculates the recurrence relation field elements for the two-electron spin-orbit
                              coupling integrals (a,0|J_u|0,0)
RR22            rr22.f        Calculates the recurrence relation field elements for the two-electron spin-orbit
                              coupling integrals (a,b|J_u|0,0) 
RR23            rr23.f        Calculates the recurrence relation field elements for the two-electron spin-orbit
                              coupling integrals (a,b|J_u|c,0)
RR24            rr24.f        Calculates the recurrence relation field elements for the two-electron spin-orbit
                              coupling integrals (a,b|J_u|c,d)
RR2SOCIN        rr2socin.f    Driver routine for the calculation of the recurrence relation field elements for the 
                              two-electron spin-orbit coupling integrals
RRMOMINT        rrmomint.f    Calculates the recurrence relation field elements for moment integrals 
RROVINT         rrovint.f     Calculates the recurrence relation field elements for overlap integrals
SCANGM          scangm.f      Gets scaled angular momentum indeces of cartesian gaussian functions (for recurrence relation 
                              field elements of one-electron spin-orbit and overlap integrals)
SCANGMF         scangmf.f     Gets scaled angular momentum indeces of cartesian gaussian functions (for recurrence relation 
                              field elements of two-electron spin-orbit integrals)
SCANGMT         scangmt.f     Gets scaled angular momentum indeces of cartesian gaussian functions (for recurrence relation
                              field elements of moment integrals)
SDIST           sdist.f       Calculates the square of the distance matrix
SHELLOP         shellop.f     Generates shell orbital pointer
SOCFST0         socfst0.f     Calculates two-electron spin-orbit matrix elements (orbital discoincidence case)
SOCFST2         socfst2.f     Calculates two-electron spin-orbit matrix elements (spin discoincidence case)
SOCINT          socint.f      Driver routine for the calculation of the one-electron spin-orbit integrals
SOCONE          socone.f      Driver routine for the calculation of the x,y,z components of the one-electron spin-orbit
                              matrix elements
SOZEFF          sozeff.f      Generates effective nuclear charges if the screened nuclear charge operator is used
TIMER           timer.f       Menages the timer   
TRAATB          traatb.f      Calculates the trace of A*transpose(B)
TRANSC          transc.f      Generates matrix trasformation spherical to cartesian orbitals
TURBOMOLE       turbomole.f   Read MOs from the mos file generated by TURBOMOLE
TURBORD         turbord.f     Reorders the linear combination MOs coefficients read from the mos file of TURBOMOLE
UCC             ucc.f         Converts lower case characters to upper case ones
VECFSO2         vecfso2.f     Calculates vector products for recurrence relation field elements of two-electron integrals
VECFSO          vecfso.f      Calculates vector products for recurrence relation field elements of one-electron integrals
VPROD           vprod.f       Calculates the vector product
WRITEOUT        writout.f     Writes in the output informations as the molecular charge, the multiplicity of the two states, 
                              the number of electrons, the geometry in Angstrom and in Bohr, the basis set for each atom, .. 
WRTHEAD         wrthead.f     Writes header  
XYZCOMP         xyzcomp.f     Driver routine for spin-orbit matrix elements (this routine calls matrelem). If necessary 
                              (multiplicity of the two states equal to one) x,y,z component are printed
